<?php //-->
/**
 * This file is part of a package designed for the Incept Project.
 *
 * Copyright and license information can be found at LICENSE.txt
 * distributed with this package.
 */

namespace Incept\Framework\Schema;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 13:49:45.
 */
class Incept_Schema_Validator_Test extends TestCase
{
  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers Incept\Framework\Schema\Validator::getCreateErrors
   */
  public function testGetCreateErrors()
  {
    $actual = Validator::getCreateErrors([
      'singular' => 'Foo',
      'plural' => 'Foos',
      'name' => 'foo',
      'detail' => 'Schema fixture',
      'fields' => []
    ]);
    $this->assertEquals('Fields is required', $actual['fields']);

    $actual = Validator::getCreateErrors([
      'singular' => 'Foo',
      'plural' => 'Foos',
      'name' => 'foo',
      'detail' => 'Schema fixture',
      'fields' => [ 'foo' => [] ]
    ]);
    $this->assertEmpty($actual);
  }

  /**
   * @covers Incept\Framework\Schema\Validator::getUpdateErrors
   */
  public function testGetUpdateErrors()
  {
    $actual = Validator::getUpdateErrors([
      'singular' => 'Foo',
      'plural' => 'Foos',
      'name' => 'foo',
      'detail' => 'Schema fixture',
      'fields' => []
    ]);
    $this->assertEquals('Fields is required', $actual['fields']);

    $actual = Validator::getUpdateErrors([
      'singular' => 'Foo',
      'plural' => 'Foos',
      'name' => 'foo',
      'detail' => 'Schema fixture',
      'fields' => [ 'foo' => [] ]
    ]);
    $this->assertEmpty($actual);
  }

  /**
   * @covers Incept\Framework\Schema\Validator::getOptionalErrors
   */
  public function testGetOptionalErrors()
  {
    $actual = Validator::getOptionalErrors([
      'singular' => 'Foo',
      'plural' => 'Foos',
      'name' => 'foo bar',
      'detail' => 'Schema fixture',
      'fields' => []
    ]);
    $this->assertEquals('Keyword must only have letters, numbers, dashes', $actual['name']);

    $actual = Validator::getOptionalErrors([
      'singular' => 'Foo',
      'plural' => 'Foos',
      'name' => 'foo',
      'detail' => 'Schema fixture',
      'fields' => [ 'foo' => [] ]
    ]);
    $this->assertEmpty($actual);
  }
}
