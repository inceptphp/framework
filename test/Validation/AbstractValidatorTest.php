<?php //-->
/**
 * This file is part of a package designed for the Incept Project.
 *
 * Copyright and license information can be found at LICENSE.txt
 * distributed with this package.
 */

namespace Incept\Framework\Validation;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 13:49:45.
 */
class AbstractValidatorTest extends TestCase
{
  /**
   * @var ValidStub
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new ValidStub;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers Incept\Framework\Validation\AbstractValidator::getConfigFieldset
   */
  public function testGetConfigFieldset()
  {
    $actual = $this->object->getConfigFieldset();
    $this->assertTrue(is_array($actual));
  }

  /**
   * @covers Incept\Framework\Validation\AbstractValidator::setParameters
   */
  public function testSetParameters()
  {
    $actual = $this->object->setParameters(['foo', 'bar']);
    $this->assertInstanceOf(ValidatorInterface::class, $actual);
  }

  /**
   * @covers Incept\Framework\Validation\AbstractValidator::toConfigArray
   */
  public function testToConfigArray()
  {
    $actual = $this->object->toConfigArray();
    $this->assertTrue(is_array($actual));
  }
}

/**
 * Required Validator
 *
 * @vendor   Incept
 * @package  System
 * @standard PSR-2
 */
class ValidStub extends AbstractValidator implements ValidatorInterface
{
  /**
   * @const string NAME Config name
   */
  const NAME = 'required';

  /**
   * @const string LABEL Config label
   */
  const LABEL = 'Required';

  /**
   * @const string TYPE Config Type
   */
  const TYPE = ValidationTypes::TYPE_GENERAL;

  /**
   * Renders the executes the validation for object forms
   *
   * @param ?mixed  $value
   * @param ?string $name  name of the field validating
   * @param ?array  $row   the row submitted with the value
   *
   * @return bool
   */
  public function valid($value = null, string $name = null, array $row = []): bool
  {
    return !is_null($value) && $value !== '';
  }
}
